fast-checkout: &fast-checkout
  attach_workspace:
    at: ~/
    
version: 2
jobs:
  checkout_rafflery:
    docker:
      - image: python
    steps:
      - checkout
      - run: rm -rf .git
      - persist_to_workspace:
          root: /root
          paths:
            - project
  build_test_frontend:
    docker:
      - image: circleci/node:12.1.0
    steps:
      - *fast-checkout
      - run:
          name: update-npm
          command: 'sudo npm install -g npm@latest'
      - restore_cache: # special step to restore the dependency cache
          key: dependency-cache-{{ checksum "rafflery-ui/package.json" }}
      - run:
          name: install-npm
          command: cd rafflery-ui && npm install
      - save_cache: # special step to save the dependency cache
          key: dependency-cache-{{ checksum "rafflery-ui/package.json" }}
          paths:
            - ./rafflery-ui/node_modules
      - run:
          name: Test Frontend
          command: cd rafflery-ui && npm run test:ci
      - store_artifacts:
          path: rafflery-ui/out/junit/test-results.xml
      - store_artifacts:
          path: rafflery-ui/out/coverage/lcov.info
      - store_test_results:
          path: rafflery-ui/out
      - run:
          name: build
          command: cd rafflery-ui && npm run build
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - .
  build_test_backend:
    docker:
      - image: gradle:jdk8
    steps:
      - *fast-checkout
      - run:
          name: build with gradle
          command: ./gradlew clean build
      - persist_to_workspace:
          root: /root
          paths:
            - .
  build_docker:
    machine: 
      services:
        - docker
    steps:
      - *fast-checkout
      - run:
          name: Build docker image
          command: |
            docker build --build-arg frontendBuild=./rafflery-ui/build --build-arg backendBuild=./rafflery-server/build/libs/rafflery.jar -t registry.heroku.com/rafflery/web .
      - run:
          name: Save docker image tag
          command: |
            docker save -o ./rafflery.tar registry.heroku.com/rafflery/web
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - .
  build_test_end2end:
    docker:
      - image: cypress/browsers:chrome67
    steps:
      - *fast-checkout
      - run:
          name: Print working dir
          command: |
            pwd
            ls
      - run:
          name: Load docker image
          command: |
            docker load -i ./rafflery.tar
      - run:
          name: Run docker image
            docker run -it -p 8080:8080 --rm rafflery
      - run:
          name: Run cypress
            cd rafflery-ui && npm run cypress:run
  deploy:
    machine: 
      services:
        - docker
    steps:
      - *fast-checkout
      - run:
          name: Install heroku cli
          command: |
            wget -qO- https://cli-assets.heroku.com/install-ubuntu.sh | sh
      - run:
          name: Login to heroku
          command: |
            docker login --username=$HEROKU_LOGIN --password=$HEROKU_API_KEY registry.heroku.com
      - run:
          name: Build docker image
          command: |
            docker build --build-arg frontendBuild=./build --build-arg backendBuild=./build/libs/rafflery.jar -t registry.heroku.com/rafflery/web .
      - run:
          name: Deploy heroku docker container
          command: |
            docker push registry.heroku.com/rafflery/web:latest
      - run:
          name: Release heroku docker container
          command: |
            heroku container:release web -a rafflery
workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - checkout_rafflery
      - build_test_frontend:
          requires:
            - checkout_rafflery
      - build_test_backend:
          requires:
            - build_test_frontend
      - build_docker:
          requires:
            - build_test_backend
      - build_test_end2end:
          requires:
            - build_docker
      - deploy:
          requires:
            - build_test_end2end
